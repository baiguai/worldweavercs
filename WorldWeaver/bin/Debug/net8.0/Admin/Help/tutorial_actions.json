{
    "topics" : [
        {
            "pattern" : "\\b(?:tutorial.actions)\\b",
            "title" : "Defining Actions: Custom Element Types",
            "string" : "
In the last article, this is what our room looked like:


{key=local_pub, name=Local Pub, type=room, parent=root
    {type=enter_message
        output={@
You are sitting in your local pub.
        }
    }


    {type=input, syntax=\b(look|l)\b
        {type=action, logic=look, tags=type }
    }
}


We've defined an input for the player and it has an 'action' element type as its child.
Action elements are very powerful. One of the things they can do is call an element with a custom type.
And this type is specific to the current parent (The room the player is in), and its children.

So if there is a treasure chest in the room, you can give that object element a 'look' element.
When the player enters an input that matches the 'look' input, the 'look' element on the room AND the treasure chest would
show the player its output.

For now, let's show the room's 'look' output:


{key=local_pub, name=Local Pub, type=room, parent=root
    {type=enter_message
        output={@
You are sitting in your local pub.
        }
    }


    {type=look, repeat=repeat
        {type=message
            output={@
You look around the local pub.
North of where you are sitting is a small door.
            }
        }
        {type=message
            output={@
You look around the local pub again...
North of where you are sitting is a small door.
            }
        }
    }



    {type=input, syntax=\b(look|l)\b
        {type=action, logic=look, tags=type }
    }
}


You may have noticed the 'repeat=repeat' specification. We'll discuss this later,
but it works in conjunction with a type that has multiple messages. This is useful for
showing random messages, or repeating messages.

Later on we will use this in conjunction with inline output logic.

Next let's define an object.

_help tutorial objects
"
        }
    ]
}
