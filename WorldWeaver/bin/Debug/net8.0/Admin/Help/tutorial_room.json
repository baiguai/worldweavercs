{
    "topics" : [
        {
            "pattern" : "\\b(?:tutorial.room)\\b",
            "title" : "Creating a Room Tutorial",
            "string" : "
Locations in WorldWeaver, whether they are indoors or outdoors, are created using the 'room' element type.
WorldWeaver caches a few elements while the player is playing a game.
The game element, the current room element, the player element, global elements, and event elements.
This way they can be retrieved without the need to go back to the database to get them.
If something changes in the game, these cached items are THEN refreshed.

More on global and event types later.

Remember, when you are building your game - you can use whatever folder/file structure you want as long
as the folders and files are within your game's root directory:

~/GameSources/MyGame/

So this allows you to build massive games and keep your definitions easy to read and manage. I like to keep my
definition files very small and focused. I use folders to organize my game. So for me personally, if you were going
to start your game in your local pub - I would create the following folder structure:

~/GameSources/MyGame/
    |__ Locations/
        |__ Home/
            |__ LocalPub/

So in this case we would create the following file to define our pub in:

~/GameSources/MyGame/Locations/Home/LocalPub/pub.nrmn


If you want to you can get really granular and use a structure like:

~/GameSources/MyGame/Locations/Home/LocalPub/room.nrmn
~/GameSources/MyGame/Locations/Home/LocalPub/objects.nrmn
~/GameSources/MyGame/Locations/Home/LocalPub/doors.nrmn


I've used similar structures with the first iteration of WorldWeaver I built. And personally, I like separating elements like that.
However, if you keep them all together, you don't have to specify the parent_element (location).
If you define an element, nested within another element, it will automatically be assigned to the parent element -
Like we saw with the sword in _help tutorial player.

So there are benefits to both approaches.


Ok let's define a room:

{key=local_pub, name=Local Pub, type=room, parent=root
    ...
}

Again we have a unique key value. And you'll notice that the parent is set to 'root'. That means that this element doesn't really have
a parent. Its parent is essentially the game itself. Most rooms are defined this way because we don't want them 'described' when we are
in their parent element. Even if a room is a closet within a bedroom. You would only want to see the description of what it's like in the
closet when the player is actually in the closet. You can define the external descriptions of the closet in the bedroom's messages.


Now that we have a room, let's define what the player sees when they enter the room:
_help tutorial enter message
"
        }
    ]
}
