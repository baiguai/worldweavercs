{
    "topics" : [
        {
            "pattern" : "\\b(?:tut.building.our.first.room)\\b",
            "title" : "Building Our First Room",
            "string" : "
In the previous topic we created our player element. And the parent property for the player
was set to 'local_pub'. This is the 'room' the player is in. In WorldWeaver (WW) every location
is a room, even if it is outdoors. Room elements are processed differently than other element
types, just like the game and player elements (And a couple others as well, but we'll deal with
those later).

So let's create our first room.
I like to keep my game code nice and neat, and separated into smaller pieces.
You don't have to organize your games in this manner, however for this tutorial let's take this approach.

In ~/GameSources/ShadowKeep let's create a 'Locations' folder.

~/GameSources/ShadowKeep/Locations

Now the local pub is in our player's home town. If our game is going to become a massive world, we
probably need to differentiate this pub from others that might show up in the game. So let's create a Home
folder:

~/GameSources/ShadowKeep/Locations/Home/LocalPub

And in this folder we'll create the local pub file:

~/GameSources/Shadowkeep/Locations/Home/LocalPub/local_pub.nrmn

And in this file we'll define a bare bones room:

---

{key=local_pub, name=Local Pub, type=room, parent=root
}

---

!NOTE!
    ALL rooms should have their parent set to 'root'. While objects can be within other objects, and
    players or npcs (Non player characters) are in rooms, a room can never be within another room.
    In the game a room can be within a house, but data-wise every room is the top level.

So now our player can be placed within this room, but we need to flesh out at least a couple other things
to make it functional within our game. We need an 'enter_message', and a means for the player to look around.
To do this, we'll add an element with a type of 'enter_message' and we'll give it an output value:

---

{key=local_pub, name=Local Pub, type=room, parent=root
    {type=enter_message
        output={@
You are sitting in your local pub.
        }
    }
}

---

You can set the output to whatever you would like. But for this tutorial, let's go with that.
To allow the player to look around let's create an element with a type of 'look'. This type can be whatever
you want, we just need to specify that type in the 'action' that we'll define shortly.

So let's create this element with a custom type.
",
            "links" : [
                "_help tut creating a look element"
            ]
        }
    ]
}
