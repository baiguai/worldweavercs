{
    "topics" : [
        {
            "pattern" : "\\b(?:tutorial.objects)\\b",
            "title" : "Defining Objects",
            "string" : "
In the last article, this is what our room looked like:


{key=local_pub, name=Local Pub, type=room, parent=root
    {type=enter_message
        output={@
You are sitting in your local pub.
        }
    }


    {type=look, repeat=repeat
        {type=message
            output={@
You look around the local pub.
North of where you are sitting is a small door.
            }
        }
        {type=message
            output={@
You look around the local pub again...
North of where you are sitting is a small door.
            }
        }
    }



    {type=input, syntax=\b(look|l)\b
        {type=action, logic=look, tags=type }
    }
}


Now we're going to create an object that is sitting in the room.
We can define this object within the room's file or in its own file.
I like to keep code small, so let's create the object in its own file.

Create or Open:
~/GameSources/MyGame/Locations/Home/LocalPub/objects.nrmn

In this file, let's create a magical egg.


{key=golden_egg, name=Golden Egg, type=object, parent=local_pub, tags=inventory
    ...
}


You'll notice the 'parent' property. That allows us to define this object in a separate file.
If you don't mind it in with the room itself, you can enter all of this in the room's
code, and simply leave the 'parent' out entirely. The compiler with grab the parent from
the element you put your object code in.
Here is an example of that:

{key=local_pub, name=Local Pub, type=room, parent=root
    {type=enter_message
        output={@
You are in the north room.
        }
    }

    {key=golden_egg, name=Golden Egg, type=object, tags=inventory
        {type=enter_message
            output={@
    You see a golden egg.

            }
        }

    }
}



You may have noticed the tags are set to 'inventory', this is because it can be picked up.
If you don't set this here, you can also update that field when the player picks up the egg.

We'll add an enter_message, and a look type element. We don't need to add an action for 'look'
because the room itself has a look action. If this object is in the room, its 'look' action
will fire after the parent's one does.

However we can add an 'examine' element, for if the player wants to look closely at the object.
This message can provide more details than what is given in the 'look'.


{key=golden_egg, name=Golden Egg, type=object, parent=local_pub, tags=inventory
    {type=enter_message
        output={@
You see a golden egg.

        }
    }

    {type=look
        {type=message
            output={@
You see a golden egg.

            }
        }
    }

    {type=inspect
        {type=message
            output={@
You inspect the egg...

            }
        }
    }


    {type=input, syntax=\b(?:examine.*egg)\b
        {type=action, logic=inspect, tags=type }
    }
}


Now that we have an object in the room, let's allow the player to pick it up. See:

_help tutorial move
"
        }
    ]
}
